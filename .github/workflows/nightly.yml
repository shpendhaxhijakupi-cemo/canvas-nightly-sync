name: Nightly Canvas Export (Filtered)

on:
  schedule:
    - cron: "0 2 * * *"   # runs daily at 02:00 UTC
  workflow_dispatch:

jobs:
  run-export:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # === Export from Canvas to CSVs (filtered to specific Canvas user IDs) ===
      - name: Run Canvas Export (filtered)
        env:
          API_URL: ${{ secrets.CANVAS_API_URL }}
          API_KEY: ${{ secrets.CANVAS_API_KEY }}
          INCLUDE_IDS: ${{ secrets.INCLUDE_CANVAS_IDS }}   # e.g. "796,797,884,903"
        run: |
          python canvas_export_enrollment_b2c_final_2.py \
            --api-url "$API_URL" \
            --api-key "$API_KEY" \
            --account-id self \
            --out "Canvas" \
            --include-assignments \
            --include-canvas-ids "$INCLUDE_IDS"

      # === Discover the actual CSV filenames the script produced ===
      - name: Discover CSV outputs
        id: discover
        shell: bash
        run: |
          echo "Workspace listing:"
          ls -la
          echo

          # Try to find per-course CSV and per-year CSV by pattern
          COURSES=$(ls -1 *Enrollment_Courses*.csv 2>/dev/null | head -n1 || true)
          ENRS=$(ls -1 *Enrollments*.csv 2>/dev/null | head -n1 || true)

          echo "Detected courses CSV: ${COURSES:-<none>}"
          echo "Detected enrollments CSV: ${ENRS:-<none>}"

          # Export to environment for later steps
          echo "COURSES_CSV=$COURSES" >> $GITHUB_ENV
          echo "ENROLLMENTS_CSV=$ENRS" >> $GITHUB_ENV

          # Fail early if we can't find the courses CSV
          if [ -z "$COURSES" ]; then
            echo "ERROR: Could not find a file matching *Enrollment_Courses*.csv"
            echo "Check your script's output filenames above."
            exit 1
          fi

      # Optional: keep whatever CSVs were created as artifacts
      - name: Upload CSVs as artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: canvas-csvs
          path: |
            *.csv

      # === Upsert per-course CSV into Airtable ===
      - name: Upsert Enrollment Courses â†’ Airtable
        env:
          AIRTABLE_PAT:        ${{ secrets.AIRTABLE_PAT }}
          AIRTABLE_BASE_ID:    ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
        run: |
          echo "Using courses CSV: $COURSES_CSV"
          python airtable_upsert.py \
            --base "$AIRTABLE_BASE_ID" \
            --table "$AIRTABLE_TABLE_NAME" \
            --token "$AIRTABLE_PAT" \
            --csv "$COURSES_CSV" \
            --unique-field "Enrollment Course Key"
