name: Nightly Canvas Export

on:
  schedule:
    - cron: "0 2 * * *"   # Every day at 02:00 UTC
  workflow_dispatch:       # Allow manual run

jobs:
  run-export:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Canvas Export (filtered)
        env:
          API_URL: ${{ secrets.CANVAS_API_URL }}
          API_KEY: ${{ secrets.CANVAS_API_KEY }}
        run: |
          python canvas_export_enrollment_b2c_final_2.py \
            --api-url "$API_URL" \
            --api-key "$API_KEY" \
            --account-id self \
            --include-assignments

      - name: Build per-course CSV for Airtable
        run: |
          python - <<'EOF'
          import csv, os
          from datetime import datetime

          input_file = "Canvas_Enrollments.csv"
          output_file = "Canvas_Enrollment_Courses.csv"

          START_MONTH = 9  # adjust if your school year begins in a different month

          if not os.path.exists(input_file):
              print(f"[fatal] Input file {input_file} not found")
              exit(1)

          with open(input_file, newline='', encoding="utf-8") as f:
              rows = list(csv.DictReader(f))

          with open(output_file, "w", newline='', encoding="utf-8") as out:
              w = csv.writer(out)
              w.writerow([
                  "Enrollment Course Key","Enrollment Key","Student Canvas ID","Student Name",
                  "School Year Label","School Year Start Date","Course ID","Course Code","Course Name",
                  "Course Start Date","Course End Date","Assigned Teachers",
                  "Current Score","Final Score","Passed?"
              ])

              for row in rows:
                  uid = row.get("user_id")
                  cid = row.get("course_id")
                  name = f"{row.get('user_name')}"
                  enr_key = row.get("enrollment_id") or ""
                  key = f"{uid}-{cid}"

                  # derive School Year label + start date
                  sy = row.get("school_year") or ""
                  sy_label, sy_start = sy, ""
                  if sy and "-" in sy:
                      try:
                          start_year = int(sy.split("-")[0])
                          sy_start = datetime(start_year, START_MONTH, 1).isoformat()
                      except:
                          pass

                  cstart = row.get("course_start_at")
                  cend = row.get("course_end_at")
                  teachers = row.get("teachers") or ""
                  cur = row.get("current_score")
                  fin = row.get("final_score")
                  passed = row.get("passed")

                  w.writerow([
                      key, enr_key, uid, name,
                      sy_label, sy_start,
                      cid,
                      row.get("course_code") or "",
                      row.get("course_name") or "",
                      cstart, cend,
                      teachers, cur or "", fin or "", passed or ""
                  ])

          print(f"[done] Wrote {len(rows)} rows to {output_file}")
          EOF

      - name: Upload CSVs as artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: csv-exports
          path: "*.csv"

      - name: Upsert Enrollment Courses â†’ Airtable
        env:
          AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
        run: |
          python airtable_upsert.py \
            --base "$AIRTABLE_BASE_ID" \
            --table "$AIRTABLE_TABLE_NAME" \
            --token "$AIRTABLE_PAT" \
            --csv "Canvas_Enrollment_Courses.csv" \
            --unique-field "Enrollment Course Key"
