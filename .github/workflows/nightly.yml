name: Nightly Canvas Export (Cohorts)

on:
  workflow_dispatch:        # manual runs
  schedule:
    - cron: "0 2 * * *"     # daily at 02:00 UTC

permissions:
  contents: read

jobs:
  run-export:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - key: B2C
            table: "B2C Courses Enrollment"
          - key: SOUTHLANDS
            table: "Southlands Courses Enrollment"
          - key: PHOENIX
            table: "Phoenix Christian Courses Enrollment"
          - key: ONE_TWO_ONE_ONE
            table: "1211 Courses Enrollment"
          - key: ROCKCHRISTIAN
            table: "Rock Christian Courses Enrollment"
          - key: GANEVAS
            table: "Ganevas Courses Enrollment"
          - key: NHCC
            table: "NHCC Courses Enrollment"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      # Map cohort -> correct secret of Canvas IDs
      - name: Resolve Canvas IDs for cohort
        id: resolve_ids
        shell: bash
        env:
          INCLUDE_CANVAS_IDS: ${{ secrets.INCLUDE_CANVAS_IDS }}
          IDS_SOUTHLANDS:     ${{ secrets.IDS_SOUTHLANDS }}
          IDS_PHOENIX:        ${{ secrets.IDS_PHOENIX }}
          IDS_1211:           ${{ secrets.IDS_1211 }}
          IDS_ROCKCHRISTIAN:  ${{ secrets.IDS_ROCKCHRISTIAN }}
          IDS_GANEVAS:        ${{ secrets.IDS_GANEVAS }}
          IDS_NHCC:           ${{ secrets.IDS_NHCC }}
        run: |
          case "${{ matrix.key }}" in
            B2C)             echo "ids=$INCLUDE_CANVAS_IDS"  >> $GITHUB_OUTPUT ;;
            SOUTHLANDS)      echo "ids=$IDS_SOUTHLANDS"      >> $GITHUB_OUTPUT ;;
            PHOENIX)         echo "ids=$IDS_PHOENIX"         >> $GITHUB_OUTPUT ;;
            ONE_TWO_ONE_ONE) echo "ids=$IDS_1211"            >> $GITHUB_OUTPUT ;;
            ROCKCHRISTIAN)   echo "ids=$IDS_ROCKCHRISTIAN"   >> $GITHUB_OUTPUT ;;
            GANEVAS)         echo "ids=$IDS_GANEVAS"         >> $GITHUB_OUTPUT ;;
            NHCC)            echo "ids=$IDS_NHCC"            >> $GITHUB_OUTPUT ;;
            *) echo "Unknown cohort key: ${{ matrix.key }}"; exit 1 ;;
          esac

      - name: Build per-course CSV for Airtable (${{ matrix.table }})
        env:
          API_URL: ${{ secrets.CANVAS_API_URL }}
          API_KEY: ${{ secrets.CANVAS_API_KEY }}
          IDS:     ${{ steps.resolve_ids.outputs.ids }}
        run: |
          python - <<'PY'
          import csv, os, time, sys
          from datetime import datetime
          import requests

          API_URL = os.environ["API_URL"].rstrip("/")
          API_KEY = os.environ["API_KEY"]
          IDS     = [s.strip() for s in (os.environ.get("IDS") or "").split(",") if s.strip()]
          HEADERS = {"Authorization": f"Bearer {API_KEY}"}
          PER_PAGE = 100
          START_MONTH = 8  # school year starts in August

          def iso(dt): return datetime.fromisoformat(dt.replace("Z","+00:00")) if dt else None
          def school_year(dt):
              if not dt: return ""
              y = dt.year
              return f"{y-1}-{y}" if dt.month < START_MONTH else f"{y}-{y+1}"

          def paged(url, params=None):
              params = dict(params or {})
              while True:
                  r = requests.get(url, headers=HEADERS, params=params, timeout=60)
                  if r.status_code in (429,500,502,503,504): time.sleep(1); continue
                  r.raise_for_status()
                  data = r.json()
                  if isinstance(data, list):
                      for x in data: yield x
                  else:
                      yield data
                  link = r.headers.get("Link","")
                  nxt = None
                  for part in link.split(","):
                      if 'rel="next"' in part:
                          nxt = part[part.find("<")+1: part.find(">")]
                          break
                  if not nxt: break
                  url, params = nxt, None

          out = "Canvas_Enrollment_Courses.csv"
          with open(out, "w", newline="", encoding="utf-8") as f:
              w = csv.writer(f)
              w.writerow([
                  "Enrollment Course Key","Enrollment Key","Student Canvas ID","Student Name",
                  "School Year","Course ID","Course Code","Course Name",
                  "Course Start Date","Course End Date","Assigned Teachers",
                  "Current Score","Final Score","Passed?",
                  "Total Assignments","Completed Assignments","Unsubmitted Assignments","% Completed"
              ])

              if not IDS:
                  print("[fatal] No Canvas IDs provided for this cohort.", file=sys.stderr)
                  sys.exit(1)

              # case-insensitive substring filters
              bad_patterns = ("NPS", "feedback", "survey")

              for uid in IDS:
                  try:
                      prof = requests.get(f"{API_URL}/users/{uid}/profile", headers=HEADERS, timeout=30)
                      name = (prof.json().get("name") or f"User {uid}") if prof.ok else f"User {uid}"

                      for enr in paged(f"{API_URL}/users/{uid}/enrollments",
                                       {"type[]":"StudentEnrollment","include[]":"grades","per_page":PER_PAGE}):
                          cid = enr.get("course_id")
                          if not cid: continue
                          grades = enr.get("grades") or {}
                          cur = grades.get("current_score")
                          fin = grades.get("final_score")

                          c = requests.get(f"{API_URL}/courses/{cid}", headers=HEADERS, timeout=60)
                          course = c.json() if c.ok else {}
                          cstart = iso(course.get("start_at")) or iso(enr.get("start_at"))
                          cend   = iso(course.get("end_at")) or iso(enr.get("end_at"))
                          sy     = school_year(cstart or iso(enr.get("created_at"))) or "unknown"

                          # Require all parts for a valid key
                          if not (str(uid).strip() and str(cid).strip() and sy != "unknown"):
                              print(f"[skip] bad key parts uid={uid} cid={cid} sy={sy}", file=sys.stderr)
                              continue

                          # teachers
                          tnames = []
                          for t in paged(f"{API_URL}/courses/{cid}/enrollments",
                                         {"type[]":"TeacherEnrollment","per_page":PER_PAGE}):
                              u = t.get("user") or {}
                              nm = u.get("name") or u.get("sortable_name")
                              if nm: tnames.append(nm)
                          teachers = ", ".join(sorted(set(tnames)))

                          # pass/fail
                          passed = ""
                          try:
                              if fin is not None: passed = "Yes" if float(fin) >= 60.0 else "No"
                          except Exception: passed = ""

                          # assignments:
                          # - include all published
                          # - exclude exact "End of Unit Feedback (Mandatory)"
                          # - exclude names containing NPS|feedback|survey (case-insensitive)
                          total = comp = unsubmitted = 0
                          for a in paged(f"{API_URL}/courses/{cid}/assignments"):
                              name_a = (a.get("name") or "")
                              if not a.get("published"): continue
                              if name_a == "End of Unit Feedback (Mandatory)": continue
                              if any(p.lower() in name_a.lower() for p in bad_patterns): continue

                              total += 1
                              s = requests.get(
                                f"{API_URL}/courses/{cid}/assignments/{a['id']}/submissions/{uid}",
                                headers=HEADERS, timeout=30)
                              if s.ok:
                                  sub = s.json()
                                  state = sub.get("workflow_state") or "unsubmitted"
                                  if sub.get("excused"):
                                      comp += 1
                                  elif state in ("graded","submitted") and (sub.get("grade") not in (None,"-","")):
                                      comp += 1
                                  else:
                                      unsubmitted += 1
                              else:
                                  unsubmitted += 1
                          pct = f"{(comp/total*100):.2f}%" if total else "0.00%"

                          enr_key = f"{uid}-{sy}"
                          key     = f"{uid}-{sy}-{cid}"

                          w.writerow([
                              key, enr_key, uid, name,
                              sy, cid, course.get("course_code") or "", course.get("name") or "",
                              cstart.isoformat() if cstart else "",
                              cend.isoformat() if cend else "",
                              teachers,
                              cur if cur is not None else "",
                              fin if fin is not None else "",
                              passed, total, comp, unsubmitted, pct
                          ])
                  except Exception as e:
                      print(f"[warn] failed student {uid}: {e}", file=sys.stderr)
                      continue

          print("[ok] wrote Canvas_Enrollment_Courses.csv for cohort")
          PY

      - name: Prepare CSV for upsert (strip Enrollment Key)
        run: |
          python - <<'PY'
          import csv
          src = "Canvas_Enrollment_Courses.csv"
          dst = "Canvas_Enrollment_Courses_for_upsert.csv"
          with open(src, newline="", encoding="utf-8") as f, open(dst, "w", newline="", encoding="utf-8") as g:
              r = csv.DictReader(f)
              fields = [h for h in r.fieldnames if h != "Enrollment Key"]
              w = csv.DictWriter(g, fieldnames=fields)
              w.writeheader()
              for row in r:
                  row.pop("Enrollment Key", None)
                  w.writerow(row)
          print("[ok] wrote", dst)
          PY

      - name: Upload CSVs (optional)
        uses: actions/upload-artifact@v4
        with:
          name: canvas-csvs-${{ matrix.key }}
          path: "*.csv"

      - name: Upsert Courses → Airtable (${{ matrix.table }})
        env:
          AIRTABLE_PAT:        ${{ secrets.AIRTABLE_PAT }}
          AIRTABLE_BASE_ID:    ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE_NAME: ${{ matrix.table }}
        run: |
          echo "IMPORTANT: Ensure 'School Year' in Airtable is a text field (e.g., 2024-2025)."
          python airtable_upsert.py \
            --base "$AIRTABLE_BASE_ID" \
            --table "$AIRTABLE_TABLE_NAME" \
            --token "$AIRTABLE_PAT" \
            --csv "Canvas_Enrollment_Courses_for_upsert.csv" \
            --unique-field "Enrollment Course Key" \
            --typecast
